(declare-variable p1 String)
(declare-variable p2 String)

(declare-variable content String)
(declare-variable start1 Int)
(declare-variable start2 Int)
(declare-variable len Int)
(assert (=
        (Substring p1 start1 len)
        (Substring p2 start2 len)
        )
)

(assert (=
        (Substring p1 start1 len)
        content
        )
)

(declare-variable s1nz Bool)
(declare-variable s2nz Bool)

(assert (= s1nz (not (= 0 start1))))
(assert (= s2nz (not (= 0 start2))))

(declare-variable tl1 Bool)
(declare-variable tl2 Bool)

(assert (= tl1 (< (+ start1 len) (Length p1))))
(assert (= tl2 (< (+ start2 len) (Length p2))))

(assert (=>
	(and
	(not (= 0 start1))
	(not (= 0 start2))
	)
	(not (=
        (Substring p1 (- start1 1) 1)
        (Substring p2 (- start2 1) 1)
	))
))

(assert (=>
	(and
	(< (+ start1 len) (Length p1))
	(< (+ start2 len) (Length p2))
	)
	(not (=
        (Substring p1 start1 (+ len 1))
        (Substring p2 start2 (+ len 1))
	))
))

(assert (= start1 0))
(assert (= start2 0))
(assert (= len 4))

(assert (> len 1))
(assert (= p1 "coke"))
(assert (= p2 "coke"))

